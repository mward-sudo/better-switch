{"version":3,"sources":["../index.ts"],"sourcesContent":["type BetterSwitch = <T>(match: string, caseObject: Record<string, CaseObjectFunction<T>>) => T\ntype CaseObjectFunction<T> = () => T\n\n// BetterSwitchTest and BetterSwitchError both reuse the parameters from BetterSwitch\ntype BetterSwitchTest = (...args: Parameters<BetterSwitch>) => boolean\ntype BetterSwitchError = (error: unknown, ...args: Parameters<BetterSwitch>) => string\n\n/**\n * A simple switch statement replacement that matches a string key and returns a value\n *\n * @param match - A string which should match a key in caseObject.\n * @param caseObject - An object with a string key with a value containing a function that\n *                     returns something.\n *                     A key of 'default' can be used to return a value if the parameter\n *                     match does not match a key in caseObject.\n *                     In typescript the returned values must all be of the same type\n * @returns The value from the matching or default key from caseObject\n */\nconst betterSwitch: BetterSwitch = (match, caseObject) => {\n  try {\n    // If caseObject[match]() does not exist, return caseObject.default()\n    return match in caseObject ? caseObject[match]() : caseObject.default()\n  } catch (error: unknown) {\n    // Handle errors when trying to call caseObject[match]() or caseObject.default()\n    throw new Error(generateErrorMessage(error, match, caseObject))\n  }\n}\n\n// Test if caseObject[match] exists and if caseObject[match] is not returning a function\nconst matchKeyIsNotFunction: BetterSwitchTest = (match, caseObject) => match in caseObject && typeof caseObject[match] !== 'function'\n// Test if caseObject.defaul exists and if caseObject.defaul is not returning a function\nconst defaultIsNotFunction: BetterSwitchTest = (match, caseObject) => 'default' in caseObject && typeof caseObject.default !== 'function'\n/** Tests if caseObject[match] does not exist and if caseObject.default does not exist */\nconst noKeyToReturn: BetterSwitchTest = (match, caseObject) => !(match in caseObject) && !('default' in caseObject)\n\nconst generateErrorMessage: BetterSwitchError = (error, match, caseObject) => {\n  if (error instanceof TypeError) {\n    if (matchKeyIsNotFunction(match, caseObject)) {\n      return `BetterSwitch: The '${match}' key in your caseObject parameter does not return a function`\n    }\n\n    if (defaultIsNotFunction(match, caseObject)) {\n      return `BetterSwitch: The '${match}' key in your caseObject parameter does not exist, and the 'default' key does not return a function`\n    }\n\n    if (noKeyToReturn(match, caseObject)) {\n      return `'BetterSwitch: ${match}' is not a key in your caseObject parameter, and no 'default' key is provided`\n    }\n  }\n\n  // Shouldn't hit this\n  return `BetterSwitch: Unhandled error (${typeof error})`\n}\n\nexport default betterSwitch\n"],"names":["matchKeyIsNotFunction","match","caseObject","defaultIsNotFunction","default","noKeyToReturn","generateErrorMessage","error","TypeError","Error"],"mappings":"AA6BA,KAAK,CAACA,CAAqB,EAAsBC,CAAK,CAAEC,CAAU,GAAKD,CAAK,IAAIC,CAAU,EAAiC,CAAU,WAAvC,MAAM,CAACA,CAAU,CAACD,CAAK,EAE/GE,CAAoB,EAAsBF,CAAK,CAAEC,CAAU,GAAK,CAAS,WAAIA,CAAU,EAAkC,CAAU,WAAxC,MAAM,CAACA,CAAU,CAACE,OAAO,CAEpHC,CAAa,EAAsBJ,CAAK,CAAEC,CAAU,KAAOD,CAAK,IAAIC,CAAU,KAAO,CAAS,WAAIA,CAAU,EAE5GI,CAAoB,EAAuBC,CAAK,CAAEN,CAAK,CAAEC,CAAU,GAAK,CAAC,AAC7E,EAAE,CAAEK,CAAK,YAAYC,SAAS,CAAE,CAAC,AAC/B,EAAE,CAAER,CAAqB,CAACC,CAAK,CAAEC,CAAU,EACzC,MAAM,CAAE,mBAAmB,EAAED,CAAK,CAAC,6DAA6D,EAGlG,EAAE,CAAEE,CAAoB,CAACF,CAAK,CAAEC,CAAU,EACxC,MAAM,CAAE,mBAAmB,EAAED,CAAK,CAAC,mGAAmG,EAGxI,EAAE,CAAEI,CAAa,CAACJ,CAAK,CAAEC,CAAU,EACjC,MAAM,CAAE,eAAe,EAAED,CAAK,CAAC,6EAA6E,CAEhH,CAAC,AAGD,MAAM,CAAE,+BAA+B,EAAE,MAAM,CAACM,CAAK,CAAC,CAAC,CACzD,CAAC,CAED,MAAM,UApC8BN,CAAK,CAAEC,CAAU,GAAK,CAAC,AACzD,GAAG,AAAC,CAAC,AAEH,MAAM,CAACD,CAAK,IAAIC,CAAU,CAAGA,CAAU,CAACD,CAAK,IAAMC,CAAU,CAACE,OAAO,EACvE,CAAC,AAAC,KAAK,CAAEG,CAAK,CAAW,CAAC,AAExB,KAAK,CAAC,GAAG,CAACE,KAAK,CAACH,CAAoB,CAACC,CAAK,CAAEN,CAAK,CAAEC,CAAU,EAC/D,CAAC,AACH,CAAC"}